import { useEffect, useRef, useState } from 'react';

import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { useSession } from 'next-auth/react';
import SimpleBar from 'simplebar-react';

import Button from '@/components/common/Button';
import Input from '@/components/common/Input';
import Modal from '@/components/common/Modal';
import Chat from '@/components/stream/Chat';
import NewChallengeForm from '@/components/stream/NewChallengeForm';
import Player from '@/components/stream/Player';
import StreamLayout from '@/layouts/StreamLayout';
import { classNames } from '@/utils/functions';

const Stream = () => {
  const [chosenFunc, setChosenFunc] = useState<'chat' | 'challenges'>('chat');
  const [showModal, setShowModal] = useState(false);
  const [showControls, setShowControls] = useState(false);
  const [mouseOver, setMouseOver] = useState(0);

  const { query } = useRouter();
  const { username } = query;
  const { data: session } = useSession();

  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  useEffect(() => {
    const disableControls = () => setShowControls(false);

    if (showControls) {
      if (timeoutRef.current && timeoutRef.current.refresh)
        timeoutRef.current.refresh();
      else timeoutRef.current = setTimeout(disableControls, 3000);
    }

    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, [showControls, mouseOver]);

  const getScreen = () => {
    if (username) {
      if (
        !session?.name ||
        (username as string).toLowerCase() !== session.name.toLowerCase()
      ) {
        return <Player showControls={showControls} />;
      } else if (
        (username as string).toLowerCase() === session?.name.toLowerCase()
      ) {
        return (
          <Button text="Создать стрим" handleClick={() => setShowModal(true)} />
        );
      }
    }
  };

  return (
    <>
      <Head>
        <title>{username}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <StreamLayout>
        {({ mode, mdBP }) => (
          <div className="relative flex max-w-full grow flex-col md:flex-row">
            <div className="flex w-full flex-col border-white/40 md:border-r">
              <div
                className="relative flex aspect-video max-h-full items-center justify-center bg-black"
                onMouseMove={() => {
                  setShowControls(true);
                  setMouseOver((prevState) => ++prevState);
                }}
              >
                {getScreen()}
              </div>
            </div>
            <div className="flex grow flex-col md:w-80">
              <div className="flex h-10 md:hidden">
                <button
                  className={classNames(
                    'w-1/2 border border-white/40 py-2',
                    chosenFunc === 'challenges'
                      ? 'bg-[#7520A9]/40 text-chat'
                      : 'hover:bg-[#7520A9]/30'
                  )}
                  onClick={() => setChosenFunc('challenges')}
                >
                  Челленджи
                </button>
                <button
                  className={classNames(
                    'w-1/2 border border-white/40 py-2',
                    chosenFunc === 'chat'
                      ? 'bg-[#7520A9]/40 text-chat'
                      : 'hover:bg-[#7520A9]/30'
                  )}
                  onClick={() => setChosenFunc('chat')}
                >
                  Чат
                </button>
              </div>
              {mdBP && chosenFunc === 'challenges' ? (
                <SimpleBar className="h-0 grow">
                  {mode === 'view' ? (
                    <p className="text-center">Здесь пусто</p>
                  ) : (
                    <NewChallengeForm />
                  )}
                </SimpleBar>
              ) : (
                <Chat />
              )}
            </div>
          </div>
        )}
      </StreamLayout>

      {showModal && (
        <Modal show={showModal} hide={() => setShowModal(false)}>
          <div className="flex flex-col gap-4">
            <h1 className="text-2xl font-bold">Создать стрим</h1>
            <div className="flex flex-col gap-2">
              <p>Stream key:</p>
              <div className="flex gap-4">
                <button>
                  <Image
                    src="/images/refresh.svg"
                    alt="refresh"
                    width={32}
                    height={32}
                  />
                </button>
                <Input
                  inputAttributes={{ readOnly: true, value: 'aaaaaaaaaaa' }}
                  glow
                />
                <button onClick={() => navigator.clipboard.writeText('aa')}>
                  <Image
                    src="/images/copy.svg"
                    alt="copy"
                    width={32}
                    height={32}
                  />
                </button>
              </div>
            </div>
          </div>
        </Modal>
      )}
    </>
  );
};

export default Stream;
